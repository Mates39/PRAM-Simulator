@page "/settings"
@rendermode InteractiveServer
@using Bakalarka
@using PramSimulator_WebApp.Components.Services
@inject PRAM pram
@inject NavigationManager Navigation
@inject CodeService codeService

<div class="UploadFile">
    <h3>📂 Nahraj soubor (drag & drop nebo kliknutím)</h3>

    <InputFile id="fileInput" OnChange="HandleSelected" class="FileDropzone" />

    @if (uploadedFile != null && !LoadError)
    {
        <div class="alert alert-success">✅ Soubor úspěšně nahrán!</div>
        <button class="btn btn-success" @onclick="LoadProgram">
            📥 Načíst program
        </button>
    }
    @if (LoadError)
    {
        <div class="alert alert-danger">❌ Soubor není ve formátu .txt!</div>
    }
</div>

<hr />

<div class="Variant">
    <h3>⚙️ Vyber variantu PRAM</h3>

    <InputRadioGroup @bind-Value="pram.AccessType" class="VariantRadioGroup">
        <label class="radio-option">
            <InputRadio Value="0" class="radio-input" />
            <span>CRCW_Common</span>
        </label>
        <label class="radio-option">
            <InputRadio Value="1" class="radio-input" />
            <span>CRCW_Arbitrary</span>
        </label>
        <label class="radio-option">
            <InputRadio Value="2" class="radio-input" />
            <span>CRCW_Priority</span>
        </label>
        <label class="radio-option">
            <InputRadio Value="3" class="radio-input" />
            <span>CREW</span>
        </label>
        <label class="radio-option">
            <InputRadio Value="4" class="radio-input" />
            <span>EREW</span>
        </label>
    </InputRadioGroup>
</div>

<hr />

<div class="PredefinedPrograms">
    <h3>📚 Předpřipravené PRAM programy</h3>

    <table class="table table-hover table-striped ProgramTable">
        <thead class="thead-dark">
            <tr>
                <th>📄 Název</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var program in codeService.Codes)
            {
                <tr>
                    <td>@program.Key</td>
                    <td>
                        <button class="btn btn-outline-primary" @onclick="() => LoadProgram(program)">
                            📥 Načíst
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (pram.LoadingFileError)
{
    <div class="ErrorMessageScreen"></div>
    <div class="ErrorMessage">
        <div class="text-center mb-3">
            <span>@pram.ErrorMessage</span>
        </div>
        <div class="text-center mt-3">
            <button class="btn btn-primary" @onclick="CloseLoadMessage">Close</button>
        </div>
    </div>
}

@code {
    private IBrowserFile uploadedFile = null;
    private string file = "";
    private bool LoadError = false;

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        LoadError = false;
        uploadedFile = e.File;
    }
    private async Task<string> ReadFileAsStringAsync(IBrowserFile file)
    {
        using var stream = file.OpenReadStream(file.Size);
        using var reader = new StreamReader(stream);
        return await reader.ReadToEndAsync();
    }
    private void LoadProgram(KeyValuePair<string, string> program)
    {
        try
        {
            pram.CodeString = "";
            pram.MemoryInputString = "";
            pram.CodeString = program.Value;
            pram.CodeCompiler.Compile(pram);
            Navigation.NavigateTo("/");
        }
        catch(Exception e)
        {
            pram.LoadingFileError = true;
            pram.ErrorMessage = e.Message;
        }
    }
    private async Task LoadProgram()
    {
        try
        {
            pram.CodeString = "";
            pram.MemoryInputString = "";
            string input = await ReadFileAsStringAsync(uploadedFile);
            string[] blocks = input.Split(new[] { "PROGRAMCODE", "MEMORYINPUT" }, StringSplitOptions.RemoveEmptyEntries);
            if (blocks.Length < 2)
            {
                throw new Exception("Spatna struktura souboru");
            }
            pram.CodeString = blocks.ElementAt(0);
            pram.MemoryInputString = blocks.ElementAt(1);
            pram.CodeCompiler.Compile(pram);
            Navigation.NavigateTo("/");
        }
        catch(Exception e)
        {
            pram.LoadingFileError = true;
            pram.ErrorMessage = e.Message;
        }
    }
    private void CloseLoadMessage()
    {
        pram.LoadingFileError = false;
    }
}