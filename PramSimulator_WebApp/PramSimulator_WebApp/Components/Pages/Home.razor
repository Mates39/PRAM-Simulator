@page "/"
@rendermode InteractiveServer
@using Bakalarka
@inject PRAM pram
@inject NavigationManager Navigation

<h1>Pram Simulator</h1>
<p> Compiled: @pram.Compiled</p>
<p>ParallelExecution: @pram.ParallelExecution</p>
@if(pram.AccessType == 0)
{
	<p>PRAM varianta: CRCW_COMMON</p>
}
@if (pram.AccessType == 1)
{
	<p>PRAM varianta: CRCW_ARBITRARY</p>
}
@if (pram.AccessType == 2)
{
	<p>PRAM varianta: CRCW_PRIORITY</p>
}
@if (pram.AccessType == 3)
{
	<p>PRAM varianta: CREW</p>
}
@if (pram.AccessType == 4)
{
	<p>PRAM varianta: EREW</p>
}
<br/>
<br />

<div class="container">
	<div class="row">
		<div class="col">
			<div class="Code">
				@if (pram.Compiled)
				{
					Code = pram.CodeString;
					string[] lines = Code.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
					<div class="CodeContainer">
						@for (int i = 0; i < lines.Length; i++)
						{
							if (i == pram.CurrentCodeLine)
							{
								<div class="CodeLine" style="background:red">
									@lines[i]
								</div>
							}
							else if (lines[i].StartsWith("#"))
							{
								<div class="CodeLine" style="color:darkgrey; font-style:italic">
									@lines[i]
								</div>
							}
							else if(lines[i].StartsWith(":"))
							{
								<div class="CodeLine" style="font-weight:bold">
									@lines[i]
								</div>
							}
							else
							{
								<div class="CodeLine">
									@lines[i]
								</div>
							}
						}
					</div>
				}
				else
				{
					<textarea @bind="pram.CodeString" rows="10" cols="40" placeholder="Napiš kod..."></textarea>
				}

				<button class="btn btn-primary" @onclick="NextStep">NExt</button>
				<button class="btn btn-primary" @onclick="Compile">Compile</button>
				<button class="btn btn-primary" @onclick="Restart">Restart</button>
			</div>
		</div>
		<div class="col">
			<div class="MemoryContainer">
				<div class="MemoryView">
					<table class="MemoryTable">
						<thead>
							<tr>
								<th class="MemoryColl">Index</th>
								<th class="MemoryColl">Value</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var item in pram.sharedMemory.memory)
							{
								<tr>
									<td class="MemoryColl">
										@item.Index
									</td>
									<td class="MemoryColl">
										<input class="InputValue" type="text" @bind="item.Value" />
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>

				<button class="btn btn-primary" @onclick="AddToSM">Add</button>
				<button class="btn btn-primary" @onclick="RemoveFromSM">Remove</button>
			</div>
		</div>
	</div>	
</div>




@if (pram.Compiled)
{
	<div class="alert alert-success">Compiled</div>
}

@if (pram.CompilationError)
{
	<div class="ErrorMessageScreen"></div>
	<div class="ErrorMessage">
		<div class="text-center mb-3">
			<span>Compilation Error</span>
		</div>
		<div class="text-center mt-3">
			<button class="btn btn-primary" @onclick="CloseErrorMessage">Close</button>
		</div>
	</div>
}

@if (pram.Halted)
{
	<div class="ErrorMessageScreen"></div>
	<div class="ErrorMessage">
		<div class="text-center mb-3">
			<span>Pram Machine halted</span>
		</div>
		<div class="text-center mt-3">
			<button class="btn btn-primary" @onclick="CloseHaltedMessage">Close</button>
		</div>
	</div>
}



@code {
	protected override async Task OnInitializedAsync()
	{
		//await Refresh();
	}
	private async Task Restart()
	{
		pram.Restart();
	}

	private int num = 0;
	private string hlaseni;
	private string Code;
	private bool Compiled;
	private void NextStep()
	{
		if(pram.Compiled)
		{
			if (pram.ParallelExecution)
			{
				int i = pram.ExecuteNextParallelStep();
			}
			else
			{
				int i = pram.ExecuteNextInstruction();
				if(pram.ParallelExecution == true)
					Navigation.NavigateTo("/parallel");
			}
			if(pram.InstructionPointer >= 0)
				pram.CurrentCodeLine = pram.ParallelExecution ? pram.Processors[0].Program.instructions[pram.Processors[0].InstructionPointer].CodeLineIndex : pram.MainProgram.instructions[pram.InstructionPointer].CodeLineIndex;

		}
		StateHasChanged();
	}
	private void Compile()
	{
		try
		{
			pram.CodeCompiler.Compile(pram, pram.CodeString);
			num = pram.MainProgram.instructions.Count;
			hlaseni = "Compiled";
			Compiled = pram.Compiled;
			pram.CurrentCodeLine = pram.ParallelExecution ? pram.Processors[0].Program.instructions[pram.Processors[0].InstructionPointer].CodeLineIndex : pram.MainProgram.instructions[pram.InstructionPointer].CodeLineIndex;
			InvokeAsync(StateHasChanged);
		}
		catch(Exception e)
		{
			pram.CompilationError = true;
		}
	}
	private void AddToSM()
	{
		pram.AddToSM();
		InvokeAsync(StateHasChanged);
	}
	private void RemoveFromSM()
	{
		pram.RemoveFromSM();
		InvokeAsync(StateHasChanged);
	}
	private void CloseErrorMessage()
	{
		pram.Restart();
	}
	private void CloseHaltedMessage()
	{
		
	}
}
