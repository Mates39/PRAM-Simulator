@page "/"
@rendermode InteractiveServer
@using Bakalarka
@using PramSimulator_WebApp.Components.Services
@using System.Threading;
@using System.Threading.Tasks;
@inject PRAM pram
@inject NavigationManager Navigation
@inject PramSimulatorService pramService



<h1>Pram Simulator</h1>
@if (Compiled)
{
	<div class="alert alert-success">Compiled</div>
}

<div class="toolbar">
	<div class="info">
		<div class="info-item">
			@if (pram.Compiled)
			{
				<span class="info-icon">✅</span>
			}
			else
			{
				<span class="info-icon">❌</span>
			}
			<span>Compiled: @pram.Compiled</span>
		</div>
		<div class="info-item">
			<span class="info-icon">⚡</span>
			<span>ParallelExecution: @pram.ParallelExecution</span>
		</div>
		<div class="info-item">
			<span class="info-icon">🧠</span>
			<span>
				PRAM varianta:
				@if (pram.AccessType == 0)
				{
					<span>CRCW_COMMON</span>
				}
				@if (pram.AccessType == 1)
				{
					<span>CRCW_ARBITRARY</span>
				}
				@if (pram.AccessType == 2)
				{
					<span>CRCW_PRIORITY</span>
				}
				@if (pram.AccessType == 3)
				{
					<span>CREW</span>
				}
				@if (pram.AccessType == 4)
				{
					<span>EREW</span>
				}
			</span>
		</div>
		<div class="info-item">
			<span class="info-icon">⚡</span>
			<span>Instructions count: @pram.InstructionCounter</span>
		</div>
	</div>
	<div class="ButtonsPanel">
		<button class="btn btn-primary" @onclick="Compile">Compile</button>
		<button class="btn btn-primary" @onclick="Restart">Restart</button>
		<button class="btn btn-primary" @onclick="Reset">Reset</button>
		<button class="btn btn-primary" @onclick="NextStep">NEXT</button>
		<button class="btn btn-primary" @onclick="AutoRun">AutoRun</button>
	</div>
</div>

<br/>
<br/>

<div class="container">
	<div class="row">
		<div class="col">
			<div class="Code">
				@if (pram.Compiled)
				{
					<div class="CodeContainer">
						@foreach (var line in CodeLines)
						{
							if (pram.CurrentCodeLine < 0)
								pram.CurrentCodeLine = pram.MainProgram.instructions[pram.InstructionPointer].CodeLineIndex;
							var isActive = line.Key == pram.CurrentCodeLine;
							var isComment = line.Value.StartsWith("#");
							var isLabel = line.Value.StartsWith(":");

							if (line.Value.StartsWith("MEMORYINPUT"))
								break;

							var cssClass = "CodeLine";
							if (isActive) cssClass += " Active";
							else if (isComment) cssClass += " Comment";
							else if (isLabel) cssClass += " Label";

							<div class="@cssClass">
								@if (!isComment && !isLabel && !string.IsNullOrWhiteSpace(line.Value))
								{
									<input type="checkbox" checked="@pram.Breakpoints.Contains(line.Key)" @onchange="() => ToggleBreakpoint(line.Key)" />
								}
								@line.Value
							</div>
						}
					</div>
				}
				else
				{
					<textarea class="editor" style="flex: 1;padding-right: 1rem;" @bind="pram.CodeString" rows="10" cols="40" placeholder="Napiš kod..."></textarea>
				}
			</div>
		</div>
		<div class="col">
			<div class="MemoryContainer">
				<div class="ProcessorInfo">
					<h5>Shared memory</h5>
				</div>
				<div class="MemoryView">
					<table class="MemoryTable">
						<thead>
							<tr>
								<th class="MemoryColl">Index</th>
								<th class="MemoryColl">Value</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var item in pram.sharedMemory.memory)
							{
								<tr>
									<td class="MemoryColl">
										@item.Index
									</td>
									<td class="MemoryColl">
										<input class="InputValue" type="text" @bind="item.Value" />
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
				<div class="MemoryButtons">
					<button class="btn btn-primary" @onclick="AddToSM">Add</button>
					<button class="btn btn-primary" @onclick="RemoveFromSM">Remove</button>
				</div>
			</div>
		</div>
	</div>	
</div>


@if (pram.CompilationError)
{
	<div class="ErrorMessageScreen"></div>
	<div class="ErrorMessage">
		<div class="text-center mb-3">
			<span>@pram.ErrorMessage</span>
		</div>
		<div class="text-center mt-3">
			<button class="btn btn-primary" @onclick="CloseErrorMessage">Close</button>
		</div>
	</div>
}
@if (pram.MemoryIndexError)
{
	<div class="ErrorMessageScreen"></div>
	<div class="ErrorMessage">
		<div class="text-center mb-3">
			<span>@pram.ErrorMessage</span>
		</div>
		<div class="text-center mt-3">
			<button class="btn btn-primary" @onclick="CloseErrorMessage">Close</button>
		</div>
	</div>
}

@if (pram.Halted)
{
	<div class="ErrorMessageScreen"></div>
	<div class="ErrorMessage">
		<div class="text-center mb-3">
			<span>Pram Machine halted</span>
		</div>
		<div class="text-center mt-3">
			<button class="btn btn-primary" @onclick="CloseHaltedMessage">Close</button>
		</div>
	</div>
}
@if (AlreadyCompiled)
{
	<div class="ErrorMessageScreen"></div>
	<div class="ErrorMessage">
		<div class="text-center mb-3">
			<span>@pram.ErrorMessage</span>
		</div>
		<div class="text-center mt-3">
			<button class="btn btn-primary" @onclick="() => AlreadyCompiled = false">Close</button>
		</div>
	</div>
}


@implements IDisposable
@code {
	private int num = 0;
	private string Code;
	private bool Compiled;
	private Dictionary<int, string> CodeLines;
	private Timer timer;
	private bool AlreadyCompiled = false;

	protected override async Task OnInitializedAsync()
	{
		CodeLines = new Dictionary<int, string>();
		string[] lines = pram.CodeString.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
		@for (int i = 0; i < lines.Length; i++)
		{
			CodeLines.Add(i, lines[i]);
		}
		pramService.OnChanged += Update;
		pramService.NavigationToParallel += NavigateParallel;
		InvokeAsync(StateHasChanged);
	}
	private async void Update()
	{
		await InvokeAsync(StateHasChanged);
	}
	public void Dispose()
	{
		pramService.OnChanged -= Update;
		pramService.NavigationToParallel -= NavigateParallel;
	}
	private async Task Restart()
	{
		pram.Restart();
		pramService.StopAutoRun();
	}
	private async Task Reset()
	{
		pram.Reset();
		pramService.StopAutoRun();
	}
	private async void NavigateParallel()
	{
		await InvokeAsync(() =>
		{
			Navigation.NavigateTo("/parallel");
		});
	}
	private void NextStep()
	{
		if(pram.Compiled)
		{
			if (pram.ParallelExecution)
			{
				pram.ExecuteNextParallelStep();
				if (!pram.ParallelExecution)
					pram.CurrentCodeLine++;
				foreach (var p in pram.ActiveProcessors)
				{
					if (p.Running)
					{
						pram.CurrentCodeLine = pram.ParallelExecution ? p.Program.instructions[p.InstructionPointer].CodeLineIndex : pram.MainProgram.instructions[pram.InstructionPointer].CodeLineIndex;
						break;
					}
				}
			}
			else
			{
				pram.ExecuteNextInstruction();
				if(pram.ParallelExecution == true)
				{
					pram.CurrentCodeLine = pram.MainProgram.instructions[pram.InstructionPointer].CodeLineIndex;
					Navigation.NavigateTo("/parallel");
				}
			}
			if (pram.InstructionPointer >= 0)
			{
				if(pram.ParallelExecution)
				{
					var activeProc = pram.ActiveProcessors.First((x) => x.Running);
					pram.CurrentCodeLine =  activeProc.Program.instructions[activeProc.InstructionPointer].CodeLineIndex;
				}
				else
					pram.CurrentCodeLine = pram.MainProgram.instructions[pram.InstructionPointer].CodeLineIndex;
			}

		}
		StateHasChanged();
	}
	private void AutoRun()
	{
		pramService.AutoRun(pram);
	}
	private async Task HideMessageAfterDelay()
	{
		await Task.Delay(2000);
		Compiled = false;
		StateHasChanged();
	}

	private void Compile()
	{
		try
		{
			if (pram.Compiled)
				throw new NotImplementedException("Program uz je zkompilovan");
			if (pram.CodeString == "")
				throw new Exception("Prazdny kod");
			Code = pram.CodeString;
			pram.CodeCompiler.Compile(pram);
			Compiled = pram.Compiled;
			_ = HideMessageAfterDelay();
			CodeLines = new Dictionary<int, string>();
			string[] lines = Code.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
			@for (int i = 0; i < lines.Length; i++)
			{
				CodeLines.Add(i, lines[i]);
			}
			pram.CurrentCodeLine = pram.ParallelExecution ? pram.Processors[0].Program.instructions[pram.Processors[0].InstructionPointer].CodeLineIndex : pram.MainProgram.instructions[pram.InstructionPointer].CodeLineIndex;
			InvokeAsync(StateHasChanged);
		}
		catch(NotImplementedException e)
		{
			AlreadyCompiled = true;
			pram.ErrorMessage = e.Message;
		}
		catch(Exception e)
		{
			pram.CompilationError = true;
			pram.ErrorMessage = e.Message;
		}
	}
	private void AddToSM()
	{
		pram.AddToSM();
		InvokeAsync(StateHasChanged);
	}
	private void RemoveFromSM()
	{
		pram.RemoveFromSM();
		InvokeAsync(StateHasChanged);
	}
	private void CloseErrorMessage()
	{
		pram.Restart();
	}
	private void CloseHaltedMessage()
	{
		pram.Halted = false;
	}
	private void ToggleBreakpoint(int lineIndex)
	{
		if (pram.Breakpoints.Contains(lineIndex))
			pram.Breakpoints.Remove(lineIndex);
		else
			pram.Breakpoints.Add(lineIndex);

	}
}
